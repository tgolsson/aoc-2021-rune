#!./runic

fn bucketize(fishes) {
    let out = (0..9).iter().map(|_| 0).collect_vec();

    for f in fishes {
	    out[f] = out[f] + 1;
    }
	
    out
}

fn parse_fish_list(list) {
    bucketize(list.split(',').map(std::int::parse).map(std::result::Result::unwrap))
}

fn day(fishes) {
    let spawn = fishes[0];
	for idx in 0..8 {
	    fishes[idx] = fishes[idx + 1];		
    }

    fishes[6] = fishes[6] + spawn;
	fishes[8] = spawn;
}

pub async fn main() {
    let fishes = parse_fish_list("1,1,1,1,1,5,1,1,1,5,1,1,3,1,5,1,4,1,5,1,2,5,1,1,1,1,3,1,4,5,1,1,2,1,1,1,2,4,3,2,1,1,2,1,5,4,4,1,4,1,1,1,4,1,3,1,1,1,2,1,1,1,1,1,1,1,5,4,4,2,4,5,2,1,5,3,1,3,3,1,1,5,4,1,1,3,5,1,1,1,4,4,2,4,1,1,4,1,1,2,1,1,1,2,1,5,2,5,1,1,1,4,1,2,1,1,1,2,2,1,3,1,4,4,1,1,3,1,4,1,1,1,2,5,5,1,4,1,4,4,1,4,1,2,4,1,1,4,1,3,4,4,1,1,5,3,1,1,5,1,3,4,2,1,3,1,3,1,1,1,1,1,1,1,1,1,4,5,1,1,1,1,3,1,1,5,1,1,4,1,1,3,1,1,5,2,1,4,4,1,4,1,2,1,1,1,1,2,1,4,1,1,2,5,1,4,4,1,1,1,4,1,1,1,5,3,1,4,1,4,1,1,3,5,3,5,5,5,1,5,1,1,1,1,1,1,1,1,2,3,3,3,3,4,2,1,1,4,5,3,1,1,5,5,1,1,2,1,4,1,3,5,1,1,1,5,2,2,1,4,2,1,1,4,1,3,1,1,1,3,1,5,1,5,1,1,4,1,2,1");

    for _ in 0..80 {
        day(fishes);
    }

    println(`Fish count: ${fishes.iter().sum()}`);

    for _ in 80..256 {
	    day(fishes);
	}
    println(`Fish count: ${fishes.iter().sum()}`);
}


#[test]
fn test_task1_full() {
    let fishes = parse_fish_list("3,4,3,1,2");
    for _ in 0..80 {
	    day(fishes);
    }

    assert_eq!(fishes.iter().sum(), 5934);
}



#[test]
fn test_task2_full() {
    let fishes = parse_fish_list("3,4,3,1,2");
    for _ in 0..80 {
	    day(fishes);
    }

    for _ in 80..256 {
	    day(fishes);
    }

    assert_eq!(fishes.iter().sum(), 26984457539);
}


